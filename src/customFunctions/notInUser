multiplicationDivisionMatches.map((val)=>{
        console.log(val)
        if(val.length>=4){
          console.log(val[3])
          const stringVal3 = val[3]
          if(stringVal3.match(/replaced[0-9]+/g)){
            const myIndex = parseInt(stringVal3.match(/[0-9]*/g));
            const myBestie = myArray[myIndex];
            const myNewVersion = <><span>{val[3]}</span><span>{val[2]}</span>{myBestie}</>
            myArray[myIndex] = myNewVersion;
          } else if(stringVal3.match(/exponent[0-9]+/g)){
            const myIndex = parseInt(stringVal3.match(/[0-9]/g)[0]);
            const myBestie = myResult[myIndex];
            myResult[myIndex] = <><span className="term">{val[1]}</span><span>{val[2]}</span>{myBestie}</>
          } else{
            input = input.replace(val[0], val[2]==="*"?"mult":"div" + i);
            myTerms[i] = <><span className="term">{val[1]}</span><span>{val[2]}</span><span className="term">{val[3]}</span></>

            i+=1;
          }

        }
        /**/
      })


      if(additionSubtractionMatches.length > 1){
        let i = 0;
        additionSubtractionMatches.map((val)=>{
          console.log('addddiisdjfai;')
          let firstTermExists = val[1].match(/(replaced|exponent|mult|div)([0-9])+/g);
          let secondTermExists = val[3].match(/(replaced|exponent|mult|div)([0-9])+/g);
          firstTermExists=firstTermExists[0]!=null?firstTermExists:false;
          secondTermExists=secondTermExists[0]!=null?secondTermExists:false;
    
    // note : if they're all different terms, why don't we just look for ones that aren't covered?
          if(val[3].match(/replaced[0-9]+/g)){
            const myIndex = parseInt(val[3].match(/[0-9]*/g)[0]);
            const myBestie = myArray[myIndex];
            const myNewVersion = <><span className="term">{val[3]}</span><span className="term">{val[2]}</span>{myBestie}</>
            myArray[myIndex] = myNewVersion;
          } else if(val[3].match(/exponent[0-9]/)){
            console.log('yesssss')
            const myIndex = parseInt(val[3].match(/[0-9]*/g)[0]);
            const myBestie = myResult[myIndex];
            myResult[myIndex] = <><span className="term"></span>{val[1]}<span>{val[2]}</span>{myBestie}</>
          } else if(val[3].match(/mult|div/s)){
            console.log(" uhwaerpoifdajiofdaejiod")
            const myIndex = parseInt(val[3].match(/[0-9]*/g)[0]);
            const myBestie = myTerms[myIndex];
            myTerms[myIndex] = <><span className="term"></span>{val[1]}<span>{val[2]}</span>{myBestie}</>
          }
          else{
            console.log('nooooo')
            input = input.replace(val[0], val[2]==="+"?"add":"sub" + i);
            finalResult[i] = <><span className="term"></span>val[1]<span>{val[2]}</span><span className="term">{val[3]}</span></>
            i+=1;
          }
        })
      }


      if(additionSubtractionMatches.length > 1){
        let i = 0;
        additionSubtractionMatches.map((val)=>{
          console.log('addddiisdjfai;')
          let firstTermExists = val[1].match(/(replaced|exponent|mult|div)([0-9])+/g);
          let secondTermExists = val[3].match(/(replaced|exponent|mult|div)([0-9])+/g);
          firstTermExists=firstTermExists[0]!=null?firstTermExists:false;
          secondTermExists=secondTermExists[0]!=null?secondTermExists:false;
    
    // note : if they're all different terms, why don't we just look for ones that aren't covered?
          if(val[3].match(/replaced[0-9]+/g)){
            const myIndex = parseInt(val[3].match(/[0-9]*/g)[0]);
            const myBestie = myArray[myIndex];
            const myNewVersion = <><span className="term">{val[3]}</span><span className="term">{val[2]}</span>{myBestie}</>
            myArray[myIndex] = myNewVersion;
          } else if(val[3].match(/exponent[0-9]/)){
            console.log('yesssss')
            const myIndex = parseInt(val[3].match(/[0-9]*/g)[0]);
            const myBestie = myResult[myIndex];
            myResult[myIndex] = <><span className="term"></span>{val[1]}<span>{val[2]}</span>{myBestie}</>
          } else if(val[3].match(/mult|div/s)){
            console.log(" uhwaerpoifdajiofdaejiod")
            const myIndex = parseInt(val[3].match(/[0-9]*/g)[0]);
            const myBestie = myTerms[myIndex];
            myTerms[myIndex] = <><span className="term"></span>{val[1]}<span>{val[2]}</span>{myBestie}</>
          }
          else{
            console.log('nooooo')
            input = input.replace(val[0], val[2]==="+"?"add":"sub" + i);
            finalResult[i] = <><span className="term"></span>val[1]<span>{val[2]}</span><span className="term">{val[3]}</span></>
            i+=1;
          }
        })
      }



      function parseMath(input1, parentTree){
        let input = input1;
        if(input==null){
          return "";
        }
        // ok so we're breaking it down into trees huh
        
      
        const parenthesesMatches = [...input.matchAll(/\((.*)\)/g)];
        let myArray  = [];
        if(parenthesesMatches.length>=1){
          let i = 0;
          myArray = parenthesesMatches.map((val)=>{
            input = input.replace(val[0],"replaced" + i);
            i = i+1;
            return (val.length>1?parseMath(val[1]):null);
            
          })
        }
        
        const exponentMatches = [...input.matchAll(/([A-z0-9]*?)\^([0-9]+)/g)];
        let myResult = [];
        if(exponentMatches.length>=1){
          let i = 0;
          exponentMatches.map((val) => {
            if(val.length>2){
              if(val[1].match(/replaced[0-9]+/g)!=null){ 
      
                // doesn't have support for parenthesis in the exponent
                const d = parseInt(val[1].match(/[0-9]+/g)[0]);
              //  const firstHalfOfArraySplit = myArray.slice(0, d);
             //   const secondHalfOfArraySplit = myArray.slice(d, myArray.length);
                const myExponent = <span className="exponent--power">{val[2]}</span>
                myArray[d] = <>{myArray[d]}{myExponent}</>
                //myArray=firstHalfOfArraySplit.concat(myExponent, secondHalfOfArraySplit);
              } else {
                input = input.replace(val[0],"exponent" + i);
                //const firstHalfOfArraySplit = myArray.slice(0, i);
               // const secondHalfOfArraySplit = myArray.slice(i, myArray.length);
                const myExponent = <><span className="exponent--base">{val[1]}</span><span className="exponent--power">{val[2]}</span></>
                myResult[i] = myExponent;
                i = i + 1;
                //myArray=firstHalfOfArraySplit.concat(myExponent, secondHalfOfArraySplit);
              }
              
            }
          })
        }
        const myTerms = [];
        const multiplicationDivisionMatches = [...input.matchAll(/([A-z0-9]+)([\*\/])([a-z0-9]+)/g)];
        //console.log(input)
        if(multiplicationDivisionMatches.length >= 1){
         // console.log('yessss');
          let i = 0;
        
            multiplicationDivisionMatches.map((val)=>{
              console.log(val)
              if(val.length>=4){
                console.log(val[3])
                const stringVal3 = val[3]
                if(stringVal3.match(/replaced[0-9]+/g)){
                  const myIndex = parseInt(stringVal3.match(/[0-9]*/g));
                  const myBestie = myArray[myIndex];
                  const myNewVersion = <><span>{val[3]}</span><span>{val[2]}</span>{myBestie}</>
                  myArray[myIndex] = myNewVersion;
                } else if(stringVal3.match(/exponent[0-9]+/g)){
                  const myIndex = parseInt(stringVal3.match(/[0-9]/g)[0]);
                  const myBestie = myResult[myIndex];
                  myResult[myIndex] = <><span className="term">{val[1]}</span><span>{val[2]}</span>{myBestie}</>
      
                } else{
                  input = input.replace(val[0], val[2]==="*"?"mult":"div" + i);
                  myTerms[i] = <><span className="term">{val[1]}</span><span>{val[2]}</span><span className="term">{val[3]}</span></>
      
                  i+=1;
                }
      
              }
              /**/
            })
        }
      
      
        const additionSubtractionMatches = [...input.matchAll(/([A-z0-9]*?)([\+\-])([0-9A-z]+)/g)];
        input =input.replace(/(replaced|exponent|mult|div)([0-9])?/g, "");
        console.log(input)
        let firstTermExists = input.match(/.*/g);
        let constantsAndExes = [...input.matchAll(/[-0-9A-z]+/g)];
        console.log(constantsAndExes)
        let finalResult = [];
        finalResult = constantsAndExes.map((constant) => {
          console.log(constant[0])
          return(<span className="term">{constant[0]}</span>)
        })
      
        console.log(firstTermExists)
        
        
      
        finalResult = finalResult.concat(myArray, myResult, myTerms);
        finalResult= finalResult.map((thing) =>{
          return(
          <>
          {thing}
          <span className="term">+</span>
          </>)
      
        })
        //finalResult[finalResult.length] = <>{input}</>
        console.log(finalResult)
        console.log(myResult)
        return finalResult;
      }